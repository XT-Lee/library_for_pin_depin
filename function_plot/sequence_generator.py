# Copyright (c) 2018-2020, Xiaotian Li
# Copyright (c) 2021, Fudan University
# This file is part of the azplugins project, released under the Modified BSD License.
# Copyright (c) 2018-2020, Xiaotian Li
# Copyright (c) 2021, Fudan University
# This file is part of the azplugins project, released under the Modified BSD License.

import hoomd
import hoomd.md
import numpy
import math
class sequence:
    R"""Add an array of points based on specified positions(kagome lattice)
    Args:
        filename(string):the name of a file to store points generated by this function
        a(integer):the lattice constant of the square lattice
        n(integer or array):number of points per dimension of the square lattice,
        n could be an integer like 7,8,9 or an array like [6,7],[4,5]
    Methods:
        generate_kagome_coarse: select each triagnle in kagome lattice 
                                and coarse grain them into a single point
                                locating at whose center.
        generate_honeycomb_part1: divide honeycomb lattice into an overlap of hexagonal lattices.
        generate_honeycomb_part2: divide honeycomb lattice into an overlap of hexagonal lattices.
        generate_honeycomb_rectangle: divide honeycomb lattice into an overlap of rectangle lattices.

    Examples::
        import azplugins.sequence_generator as sg 
        sq = sg.sequence()
        sq.generate_sq(a=2,n=6)
        sq.save("sq26")
        #a file named 'sq26.txt' will be created

    .. warning::
        the function uses 'hoomd.context.initialize' to generate points, 
        so don't call this function together with your simulation through hoomd

    """
    def __init__(self):
        hoomd.context.initialize('');#--mode=cpu
        
    def save(self,filename):
        self.snap=self.system.take_snapshot();
        self.points=self.snap.particles.position[:]
        numpy.savetxt(filename,self.points);
        #numpy.loadtxt

    def generate_sq(self,a,n):
        self.system = hoomd.init.create_lattice(unitcell=hoomd.lattice.sq(a=a), n=n);

    def generate_hex(self,a,n):
        self.system = hoomd.init.create_lattice(unitcell=hoomd.lattice.hex(a=a), n=n);
    
    def generate_honeycomb(self,a,n):
        uc = hoomd.lattice.unitcell(N=4,
                                a1=[3*a, 0, 0],
                                a2=[0, math.sqrt(3)*a, 0],
                                a3=[0, 0, 1],
                                dimensions=2,#the shape is a bow upward /--\
                                position=[[0,0,0], [1/2*a, math.sqrt(3)/2*a, 0],[3/2*a,math.sqrt(3)/2*a,0],[2*a,0,0]],
                                type_name=['A', 'A','A','A'],
                                diameter=[1,1,1,1]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);
        
    def generate_kagome(self,a,n):
        uc = hoomd.lattice.unitcell(N=6,
                            a1=[2*a, 0, 0],
                            a2=[0, 2*math.sqrt(3)*a, 0],
                            a3=[0, 0, 1],
                            dimensions=2,
                            position=[[0,0,0], [a, 0, 0],[a/2,math.sqrt(3)*a/2,0],
                                    [a,math.sqrt(3)*a,0],[2*a,math.sqrt(3)*a,0],[1.5*a,1.5*math.sqrt(3)*a,0]],
                            type_name=['A','A','A','A','A','A'],
                            diameter=[1.0,1.0,1.0,1.0,1.0,1.0]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);
    
    def generate_kagome_part(self,a,n):
        uc = hoomd.lattice.unitcell(N=4,
                            a1=[2*a, 0, 0],
                            a2=[0, 2*math.sqrt(3)*a, 0],
                            a3=[0, 0, 1],
                            dimensions=2,
                            position=[[0,0,0], [a, 0, 0],
                                    [a,math.sqrt(3)*a,0],[2*a,math.sqrt(3)*a,0]],
                            type_name=['A','A','A','A'],
                            diameter=[1.0,1.0,1.0,1.0]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);
    
    def generate_kagome_part_cycle(self,a,n):
        uc = hoomd.lattice.unitcell(N=12,
                            a1=[6*a, 0, 0],
                            a2=[0, 2*math.sqrt(3)*a, 0],
                            a3=[0, 0, 1],
                            dimensions=2,
                            position=[[a, 0, 0], [2*a, 0, 0],[4*a, 0, 0],[5*a, 0, 0],
                                       [a/2,math.sqrt(3)*a/2,0],[2.5*a,math.sqrt(3)*a/2,0],
                                       [a, math.sqrt(3)*a, 0], [2*a, math.sqrt(3)*a, 0],[4*a, math.sqrt(3)*a, 0],[5*a, math.sqrt(3)*a, 0],
                                    [3.5*a,1.5*math.sqrt(3)*a,0],[5.5*a,1.5*math.sqrt(3)*a,0]],
                            type_name=['A','A','A','A','A','A','A','A','A','A','A','A'],
                            diameter=[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);

    def generate_kagome_coarse(self,a,n):
        uc = hoomd.lattice.unitcell(N=2,
                            a1=[2*a, 0, 0],
                            a2=[0, 2*math.sqrt(3)*a, 0],
                            a3=[0, 0, 1],
                            dimensions=2,
                            position=[[a/2.0,math.sqrt(3)*a/6.0,0],
                                      [1.5*a,7.0/6.0*math.sqrt(3)*a,0]],
                            type_name=['A','A'],
                            diameter=[1.0,1.0]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);

    def generate_honeycomb_bidispersion(self,a,n):
        uc = hoomd.lattice.unitcell(N=4,
                                a1=[3*a, 0, 0],
                                a2=[0, math.sqrt(3)*a, 0],
                                a3=[0, 0, 1],
                                dimensions=2,
                                position=[[0,0,0], [1/2*a, math.sqrt(3)/2*a, 0],[3/2*a,math.sqrt(3)/2*a,0],[2*a,0,0]],#a bow upward
                                type_name=['A', 'B','A','B'],
                                diameter=[1,1,1,1]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);

    def generate_honeycomb_part1(self,a,n):
        uc = hoomd.lattice.unitcell(N=2,
                                a1=[3*a, 0, 0],
                                a2=[0, math.sqrt(3)*a, 0],
                                a3=[0, 0, 1],
                                dimensions=2,
                                position=[[0,0,0], [3/2*a,math.sqrt(3)/2*a,0]],#
                                type_name=['A', 'A'],
                                diameter=[1,1]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);

    def generate_honeycomb_part2(self,a,n):
        uc = hoomd.lattice.unitcell(N=2,
                                a1=[3*a, 0, 0],
                                a2=[0, math.sqrt(3)*a, 0],
                                a3=[0, 0, 1],
                                dimensions=2,
                                position=[[1/2*a, math.sqrt(3)/2*a, 0],[2*a,0,0]],#
                                type_name=['A', 'A'],
                                diameter=[1,1]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);
    
    def generate_honeycomb_rectangle1(self,a,n):
        uc = hoomd.lattice.unitcell(N=2,
                                a1=[3*a, 0, 0],
                                a2=[0, math.sqrt(3)*a, 0],
                                a3=[0, 0, 1],
                                dimensions=2,#the shape  /--\ ->  --
                                position=[ [1/2*a, math.sqrt(3)/2*a, 0],[3/2*a,math.sqrt(3)/2*a,0]],
                                type_name=['A', 'A'],
                                diameter=[1,1]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);
    
    def generate_honeycomb_rectangle2(self,a,n):
        uc = hoomd.lattice.unitcell(N=2,
                                a1=[3*a, 0, 0],
                                a2=[0, math.sqrt(3)*a, 0],
                                a3=[0, 0, 1],
                                dimensions=2,#the shape  /--\ ->  /  \
                                position=[ [0, 0, 0],[2*a,0,0]],
                                type_name=['A', 'A'],
                                diameter=[1,1]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);

    def generate_cairo(self,a,n):#let the edge lengths of pentagons are 0.5*[1+sqrt(3)] or 1
        ss = math.sqrt(3)
        uc = hoomd.lattice.unitcell(N=12,
                                a1=[0.5*(6+2*ss)*a, 0, 0],
                                a2=[0, 0.5*(6+2*ss)*a, 0],
                                a3=[0, 0, 1],
                                dimensions=2,#the shape is a bow upward /--\_ where edge of square & triangle is 2*sqrt(3)
                                position=[
                                          [0,0,0], [0.5*(4+2*ss)*a, 0, 0],
                                          [0.5*(2+ss)*a,0.5*a,0],
                                          [0.5*(0.5+0.5*ss)*a,0.5*(1.5+0.5*ss)*a,0],[0.5*(3.5+1.5*ss)*a,0.5*(1.5+0.5*ss)*a,0],
                                          [0.5*(1+ss)*a,0.5*(3+ss)*a,0],[0.5*(3+ss)*a,0.5*(3+ss)*a,0],
                                          [0.5*(0.5+0.5*ss)*a,0.5*(4.5+1.5*ss)*a,0],[0.5*(3.5+1.5*ss)*a,0.5*(4.5+1.5*ss)*a,0],
                                          [0.5*(2+ss)*a,0.5*(5+2*ss)*a,0],
                                          [0.5*(5+2*ss)*a,0.5*(2+ss)*a,0],[0.5*(5+2*ss)*a,0.5*(4+ss)*a,0],
                                          ],
                                type_name=['A', 'A','A','A','A', 'A','A','A','A', 'A','A','A'],
                                diameter=[1,1,1,1,1,1,1,1,1,1,1,1]);
        self.system = hoomd.init.create_lattice(unitcell=uc, n=n);
        """
                                          [0,0,0], [(4+2*ss)*a, 0, 0],
                                          [(2+ss)*a,a,0],
                                          [(0.5+0.5*ss)*a,(1.5+0.5*ss)*a,0],[(3.5+1.5*ss)*a,(1.5+0.5*ss)*a,0],
                                          [(1+ss)*a,(3+ss)*a,0],[(3+ss)*a,(3+ss)*a,0],
                                          [(0.5+0.5*ss)*a,(4.5+1.5*ss)*a,0],[(3.5+1.5*ss)*a,(4.5+1.5*ss)*a,0],
                                          [(2+ss)*a,(5+2*ss)*a,0],
                                          [(5+2*ss)*a,(2+ss)*a,0],[(5+2*ss)*a,(4+ss)*a,0],
        """

"""import hoomd
import hoomd.md
import numpy
class sequence:
    def __init__(self,structure,filename,a,n):
        self.structure = structure
        self.filename = filename
        self.a = a
        self.n = n
        #self.system = None
        #self.snap
        hoomd.context.initialize('--mode=cpu');

    def savefile(self):
        self.system = hoomd.init.create_lattice(unitcell=hoomd.lattice.sq(a=self.a), n=self.n);
        self.snap=self.system.take_snapshot();
        self.points=self.snap.particles.position[:]
        #return points
        numpy.save(self.filename,self.points);
    
    def show(self)"""

